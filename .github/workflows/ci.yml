name: Build, Dockerize and Deploy

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  
jobs:
  build-and-deploy:
    name: Build Jekyll and Docker
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          working-directory: './jekyll'
                
      - name: Install dependencies
        working-directory: './jekyll'
        run: bundle install
        
      - name: Build Jekyll site
        working-directory: './jekyll'
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build

      - name: Generate changelog and bump version
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          git-message: 'chore(release): {version}'
          preset: 'angular'
          tag-prefix: 'v'
          output-file: 'CHANGELOG.md'
          release-count: 0
          skip-on-empty: false
          skip-version-file: true
          skip-commit: false

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.REPO_TOKEN }}
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.ARTIFACT_NAME }}
          tags: |
            type=raw,value=${{ secrets.ENVIRONMENT }}-sha-{{sha}}
            type=raw,value=${{ secrets.ENVIRONMENT }}-latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./jekyll
          file: ./jekyll/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate release description
        id: release_description
        run: |
          # Extract changes since the last tag
          CHANGES=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~1)..HEAD --pretty=format:"- %s (%h)" --reverse)
          
          # Create a formatted changelog
          echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "## What's Changed in v${{ steps.changelog.outputs.version }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$CHANGES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## Detailed Changelog" >> $GITHUB_ENV
          echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for full details." >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV          

      - name: Create deployment artifacts
        run: |
          mkdir -p deployment
          cp -r traefik scripts docker-compose.${{ secrets.ENVIRONMENT }}.yml .env.example ./jekyll/_site/* deployment/
          cd deployment
          zip -r ../release-${{ steps.tag_version.outputs.new_version }}.zip .
          
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: deployment

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_version }}
          name: Release ${{ steps.tag_version.outputs.new_version }}
          body: ${{ steps.tag_version.outputs.changelog }}
          artifacts: "release-${{ steps.tag_version.outputs.new_version }}.zip"
          token: ${{ secrets.GITHUB_TOKEN }}